
#include <iostream>
#include <fstream>
#include <sstream>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>


#include <ros/ros.h>
#include <tf/transform_broadcaster.h>

#include <unsupported/Eigen/MatrixFunctions>
#include <eigen3/Eigen/Core>
#include <eigen3/Eigen/Dense>
#include <eigen3/Eigen/Geometry>

#include <cmath>



using namespace std;
using namespace Eigen;


ofstream file_output_error;
ofstream file_output_state;


void takeData_callback( const geometry_msgs::TransformStamped::ConstPtr& Transform_estimate)
{


}






int main(int argc, char** argv)
{
	ros::init(argc, argv, "Take_data");// ROS node
   ros::NodeHandle nn;

	


	ros::Subscriber pose_filter_sub;
	pose_filter_sub = nn.subscribe(>("/transform_KALMAN_estimation" , 1, &takeData_callback);


	file_output_error.open("error_est.txt", ios::app);
	file_output_state.open("state_est.txt", ios::app);


	ros::Rate loop_rate(100);


	while(nn.ok())
	{
		ros::spinOnce(); 
		loop_rate.sleep();
	}


	file_output.close();

}
